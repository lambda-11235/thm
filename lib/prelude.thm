
type Bottom []
type Top [ top ]

type UnInhabited 'a [ un('a -> Bottom) ]

type Prod 'a 'b [ prod('a, 'b) ]
type Sum 'a 'b [ sum1('a) sum2('b) ]


type Bool [ true false ]

if b t f = case[Bool] b t f;
not b = if b false true;
and b1 b2 = if b1 b2 false;
or b1 b2 = if b1 true b2;


id x = x;
const x y = x;
comp f g x = f (g x);
flip f x y = f y x;

fix bot x = bot (case[Top] x x);