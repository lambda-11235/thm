
type Nat [ Z S(Nat) ]

fix natInd x f n = case[Nat] n x (\p. f (natInd x f p));

n0 = Z;
n1 = S n0;
n2 = S n1;
n3 = S n2;
n4 = S n3;
n5 = S n4;
n6 = S n5;
n7 = S n6;
n8 = S n7;
n9 = S n8;
n10 = S n9;

pred n = case[Nat] n Z (\p. p);

fix equal m n =
  case[Nat] m
            (case[Nat] n true (\_. false))
            (\pm. case[Nat] n false (\pn. equal pm pn));

fix lt m n =
  case[Nat] m
            (case[Nat] n false (\_. true))
            (\pm. case[Nat] n false (\pn. lt pm pn));


fix add m n = case[Nat] m n (\p. S (add p n));

fix mult m n = case[Nat] m Z (\p. add n (mult p n));

fix pow m n = case[Nat] n n1 (\p. mult m (pow m p));

fix sub m n = case[Nat] n m (\p. sub (pred m) p);

fix div m n = if (lt m n) Z (S (div (sub m n) n));

fix rem m n = if (lt m n) m (rem (sub m n) n);


fix fact n = case[Nat] n n1 (\p. mult n (fact p));

fix repeatedly n f x = case[Nat] n x (\p. f (repeatedly p f x));