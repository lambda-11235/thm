
type State 's 'a [ state('s -> Prod 's 'a) ]


run st s = case[State] st (\f. f s);

return x = state (\s. prod s x);

seq st f =
  state (\s1. let p = run st s1; in
               case[Prod] p (\s2 x. run (f x) s2));

seqIgn st1 st2 = seq st1 (\_. st2);

get = state (\s. prod s s);
put s = state (\_. prod s top);

alt f = seq get (\s. put (f s));